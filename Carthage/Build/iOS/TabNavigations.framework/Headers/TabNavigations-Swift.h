// Generated by Apple Swift version 4.0 effective-3.2 (swiftlang-900.0.65 clang-900.0.37)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_attribute(external_source_symbol)
# define SWIFT_STRINGIFY(str) #str
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name) _Pragma(SWIFT_STRINGIFY(clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in=module_name, generated_declaration))), apply_to=any(function, enum, objc_interface, objc_category, objc_protocol))))
# define SWIFT_MODULE_NAMESPACE_POP _Pragma("clang attribute pop")
#else
# define SWIFT_MODULE_NAMESPACE_PUSH(module_name)
# define SWIFT_MODULE_NAMESPACE_POP
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

SWIFT_MODULE_NAMESPACE_PUSH("TabNavigations")
@protocol TabNavigationBarDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC14TabNavigations16TabNavigationBar")
@interface TabNavigationBar : UIView <UIBarPositioning>
@property (nonatomic, weak) id <TabNavigationBarDelegate> _Nullable delegate;
@property (nonatomic) BOOL isTranslucent;
/// The height of the content area of the tab navigation bar ignoring the top edge of the safe area.
/// You typically use this property to set the height of the tab navigation bar instead of the setting
/// the frame or constraint of the tab navigation bar.
/// Default value: 64.0.
@property (nonatomic) CGFloat height;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations))
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end





@class UIScrollView;

@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
@end




@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly) UIBarPosition barPosition;
@end


@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) CGFloat paddingOfTitleItems;)
+ (CGFloat)paddingOfTitleItems SWIFT_WARN_UNUSED_RESULT;
@end



@class NSLayoutYAxisAnchor;

@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly, strong) NSLayoutYAxisAnchor * _Nonnull firstBaseLineAnchor;
@property (nonatomic, readonly, strong) NSLayoutYAxisAnchor * _Nonnull lastBaselineAnchor;
@end

@class TabNavigationTitleItem;
@class TabNavigationItem;
@class TabNavigationTitleActionItem;

@interface TabNavigationBar (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly) NSInteger selectedIndex;
/// Get the selected title item of the tab-navigation bar.
@property (nonatomic, readonly, strong) TabNavigationTitleItem * _Nullable selectedTitleItem;
/// Get all the current navigation items of the tab-navigation bar.
@property (nonatomic, readonly, strong) TabNavigationItem * _Nonnull navigationBackItem;
@property (nonatomic, copy) NSArray<TabNavigationItem *> * _Nonnull navigationItems;
@property (nonatomic, copy) NSArray<TabNavigationTitleItem *> * _Nonnull navigationTitleItems;
@property (nonatomic, copy) NSArray<TabNavigationTitleActionItem *> * _Nonnull navigationTitleActionItems;
- (void)showNavigationBackItem:(BOOL)animated;
- (void)hideNavigationBackItem:(BOOL)animated;
- (void)addNavigationItem:(TabNavigationItem * _Nonnull)item;
- (void)setNavigationItems:(NSArray<TabNavigationItem *> * _Nonnull)items animated:(BOOL)animated;
- (void)addNavigationTitleItem:(TabNavigationTitleItem * _Nonnull)item;
- (void)addNavigationTitleActionItem:(TabNavigationTitleActionItem * _Nonnull)item;
- (void)setSelectedTitleAt:(NSInteger)index animated:(BOOL)animated;
@end


SWIFT_PROTOCOL("_TtP14TabNavigations24TabNavigationBarDelegate_")
@protocol TabNavigationBarDelegate
@optional
- (void)tabNavigationBar:(TabNavigationBar * _Nonnull)tabNavigationBar willSelectTitleItemAt:(NSInteger)index animated:(BOOL)animated;
- (void)tabNavigationBar:(TabNavigationBar * _Nonnull)tabNavigationBar didSelectTitleItemAt:(NSInteger)index;
- (void)tabNavigationBarDidTouchNavigatiomBackItem:(TabNavigationBar * _Nonnull)tabNavigationBar;
@end

@protocol UILayoutSupport;
@class UIPanGestureRecognizer;
@class NSBundle;

SWIFT_CLASS("_TtC14TabNavigations23TabNavigationController")
@interface TabNavigationController : UIViewController
/// Tab navigation bar of the tab-navigation controller.
@property (nonatomic, readonly, strong) TabNavigationBar * _Nonnull tabNavigationBar;
@property (nonatomic, copy) NSArray<TabNavigationTitleActionItem *> * _Nonnull tabNavigationTitleActionItems;
@property (nonatomic, copy) NSArray<TabNavigationTitleActionItem *> * _Nonnull tabNavigationTitleActionItemsWhenPushed;
@property (nonatomic, readonly, strong) id <UILayoutSupport> _Nonnull keyboardAlignmentLayoutGuide;
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nonnull interactivePopGestureRecognizer;
@property (nonatomic, readonly, strong) UIViewController * _Nullable topViewController;
@property (nonatomic, readonly) BOOL shouldAutomaticallyForwardAppearanceMethods;
@property (nonatomic, readonly) BOOL isViewAppeared;
@property (nonatomic) BOOL isTabNavigationItemsUpdatingDisabledInRootViewControllers;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
@end










@interface TabNavigationController (SWIFT_EXTENSION(TabNavigations)) <TabNavigationBarDelegate>
- (void)tabNavigationBar:(TabNavigationBar * _Nonnull)tabNavigationBar willSelectTitleItemAt:(NSInteger)index animated:(BOOL)animated;
- (void)tabNavigationBar:(TabNavigationBar * _Nonnull)tabNavigationBar didSelectTitleItemAt:(NSInteger)index;
- (void)tabNavigationBarDidTouchNavigatiomBackItem:(TabNavigationBar * _Nonnull)tabNavigationBar;
@end


@interface TabNavigationController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
@property (nonatomic, readonly) UIStatusBarAnimation preferredStatusBarUpdateAnimation;
@end


@interface TabNavigationController (SWIFT_EXTENSION(TabNavigations)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
@end


@interface TabNavigationController (SWIFT_EXTENSION(TabNavigations))
- (void)setSelectedViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (void)setSelectedViewControllerAt:(NSInteger)index animated:(BOOL)animated;
- (void)push:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
- (void)popToRootViewControllersWithAnimated:(BOOL)animated;
- (void)popTo:(UIViewController * _Nullable)viewController animated:(BOOL)animated;
@end

@class UIImage;
@class UIColor;

/// A type representing the navigation item on the right top corner of TabNavigationBar.
/// Same as the UINavigationItem to set up and use.
SWIFT_CLASS("_TtC14TabNavigations17TabNavigationItem")
@interface TabNavigationItem : NSObject
/// Returns the image of the underlying button.
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
/// Returns the title of the underlying button.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// The tint color of the underlying button.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The target in action-target mode of the underlying button.
@property (nonatomic, readonly) id _Nullable target;
/// Returns the first selector for the target of the underlying button.
@property (nonatomic, readonly) SEL _Nullable selector;
/// Creates a TabNavigationItem with a title for the underlying button.
/// \param title The String value for the title of the underlying button at normal state.
///
///
/// returns:
/// A new item with the given title.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title OBJC_DESIGNATED_INITIALIZER;
/// Creates a TabNavigationItem with an image, target and selector for the underlying button.
/// \param image An UIImage object for the image of the underlying button at normal state.
///
/// \param target The target object for the action-target mode. Default: nil.
///
/// \param selector The Selector value for the action-target mode. Default: nil.
///
///
/// returns:
/// A new item with the given parameters.
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image target:(id _Nullable)target selector:(SEL _Nullable)selector;
/// Creates a TabNavigationItem with a title, target and selector for the underlying button.
/// \param title A String value for the title of the underlying button at normal state.
///
/// \param target The target object for the action-target mode. Default: nil.
///
/// \param selector The Selector value for the action-target mode. Default: nil.
///
///
/// returns:
/// A new item with the given parameters.
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title target:(id _Nullable)target selector:(SEL _Nullable)selector;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIFont;

/// A type representing the navigation title item on the left top corner of TabNavigationBar.
SWIFT_CLASS("_TtC14TabNavigations22TabNavigationTitleItem")
@interface TabNavigationTitleItem : NSObject
/// Indicates the selection state of the title item. The selected state will has a large font size
/// and heavy text color.
@property (nonatomic) BOOL selected;
/// Returns the title color of current selection state.
@property (nonatomic, readonly, strong) UIColor * _Nonnull currentTitleColor;
/// Returns the title font of current selection state.
@property (nonatomic, readonly, strong) UIFont * _Nonnull currentTitleFont;
/// Sets and updates the color configs for the selection states of the item.
/// \param titleColor A UIColor object to update the color config.
///
/// \param selected The selection state, true for selected and false for unselected.
///
- (void)setTitleColor:(UIColor * _Nonnull)titleColor whenSelected:(BOOL)selected;
/// Get the title color for the specific selection state.
/// \param selected The selection state.
///
///
/// returns:
/// The color for the selection state.
- (UIColor * _Nonnull)titleColorWhenSelected:(BOOL)selected SWIFT_WARN_UNUSED_RESULT;
/// Sets and updates the font configs for the selection states of the item.
/// \param titleFont A UIFont object to update the font config.
///
/// \param selected The selection state, true for selected and false for unselected.
///
- (void)setTitleFont:(UIFont * _Nonnull)titleFont whenSelected:(BOOL)selected;
/// Get the title font for the specific selection state.
/// \param selected The selection state.
///
///
/// returns:
/// The font for the selection state.
- (UIFont * _Nonnull)titleFontWhenSelected:(BOOL)selected SWIFT_WARN_UNUSED_RESULT;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion SWIFT_AVAILABILITY(ios,unavailable);
/// Creates a TabNavigationTitleItem object with a given title content.
/// \param title A String value for the underlying button title of the title item.
///
///
/// returns:
/// A new TabNavigationTitleItem item.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// A subclassing of TabNavigationTitleItem representing the title action item.
/// A title action item lay on the right end of the title items, the action item
/// cannot be selected like the title item, but the action item can perform like
/// a navigation item on the right corner of the tab nagivation bar.
SWIFT_CLASS("_TtC14TabNavigations28TabNavigationTitleActionItem")
@interface TabNavigationTitleActionItem : TabNavigationTitleItem
/// Returns the unselected font for the action item.
- (UIFont * _Nonnull)titleFontWhenSelected:(BOOL)selected SWIFT_WARN_UNUSED_RESULT;
/// Returns the unselected color for the action item.
- (UIColor * _Nonnull)titleColorWhenSelected:(BOOL)selected SWIFT_WARN_UNUSED_RESULT;
/// The tint color of the action button.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Creates a TabNavigationTitleActionItem object with a given title content.
/// \param title A String value for the underlying button title of the title item.
///
///
/// returns:
/// A new TabNavigationTitleActionItem item.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title OBJC_DESIGNATED_INITIALIZER;
/// Creates a TabNavigationTitleActionItem object with a given title content and target-action field.
/// \param title A String value for the underlying button title of the title item.
///
/// \param target The target object for the action-target mode.
///
/// \param selector The Selector value for the action-target mode.
///
///
/// returns:
/// A new TabNavigationTitleActionItem item.
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title target:(id _Nullable)target selector:(SEL _Nonnull)selector;
@end











@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
- (void)makeViewScrollToTopIfNecessaryAt:(CGPoint)location;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
/// Overrides to prepare for next transition when selected view did appear.
/// The view controllers former and nexter will be triggered.
- (void)prepareForTransition;
/// Indicate the view controller managed by TabNavigationController will
/// begin transition by gesture.(The content scroll view will begin dragging.)
- (void)viewWillBeginInteractiveTransition;
/// Indicate the view controller managed by TabNavigationController will end
/// dragging trasition.
/// \param appearing Indicate the view controller is about to call <code>viewWillAppear(:)</code> or not.
///
- (void)viewDidEndInteractiveTransitionWithAppearing:(BOOL)appearing;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly, strong) id <UILayoutSupport> _Nullable keyboardAlignmentLayoutGuide;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly) UIEdgeInsets layoutInsets;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, copy) NSArray<TabNavigationTitleActionItem *> * _Nonnull tabNavigationTitleActionItemsWhenPushed;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, copy) NSArray<TabNavigationItem *> * _Nonnull tabNavigationItems;
- (void)setTabNavigationItems:(NSArray<TabNavigationItem *> * _Nonnull)items animated:(BOOL)animated;
@end


@interface UIViewController (SWIFT_EXTENSION(TabNavigations))
@property (nonatomic, readonly, strong) TabNavigationController * _Nullable tabNavigationController;
@end



SWIFT_MODULE_NAMESPACE_POP
#pragma clang diagnostic pop
